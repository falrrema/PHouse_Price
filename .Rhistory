gc()
devtools::install_github("mlr-org/shinyMlr/package")
runShinyMlr()
library(shinyMlr)
runShinyMlr()
library(shiny)
runShinyMlr()
install.packages("shiny")
install.packages("shiny")
install.packages("shinyjs")
install.packages("shinyMlr")
library(devtools)
install.packages("shiny", dependencies=T)
install.packages("shinydashboard", dependencies=T)
install.packages("DT", dependencies=T)
install.packages("shinyBS", dependencies=T)
runShinyMlr()
library(shinyMlr)
runShinyMlr()
#################
# Preprocessing #
#################
setwd("~/Dropbox/ProyectosDS/PHouse_Price")
Sys.setlocale(locale = "es_ES.UTF-8") # Para visualizar caracteres especiales
source("helper.R")
library(plotly)
library(mlr)
library(skimr)
library(DMR)
library(forcats)
installThesePackages()
loadThesePackages()
train <- fread("data/train.csv")
test <- fread("data/test.csv")
# EDA
# EDA ---------------------------------------------------------------------
glimpse(train)
# Missing Value evaluation
visualize_NA(train) # PoolQC, MiscFeature, Alley, Fence
train <- removeColumns_NA(data = train, upperBound = 80) # Removing high percent NA columns (> 80%)
# train[is.na(train)] <- "NO VAL" # Creating a category for NA values
# Transformations
stats <- skim(train)
colcat <- stats %>% filter(type == "character") %$% unique(var) # get character columns
train %>% select(colcat) %>% # Counts of levels by each categorical column
gather(col, levels) %>%
count(col, levels) %>%
ggplot(aes(x = levels, y = n)) + geom_bar(stat = "identity", fill = "dodgerblue") +
facet_wrap(~col, scales = "free")
train$Exterior2nd %>% unique()
sales_by_factor <- train %>% # lets analyze the contribution of levels of categories in sales price
select(SalePrice, colcat) %>%
mutate(logSalesPrice = log10(SalePrice + 1)) %>% # log transformation of sales price
gather(col, levels, MSZoning:SaleCondition)
sales_by_factor
sales_by_factor %>%
ggplot(aes(x = levels, y = logSalesPrice, fill = col)) +
geom_boxplot() + theme(legend.position = "none") +
facet_wrap(~col, scales = "free")
log_sales_by_factor <- train %>% data.frame %>%
select(SalePrice, colcat) %>%
mutate(logSalesPrice = log10(SalePrice + 1), SalePrice = NULL) %>%
mutate_at(vars(colcat), funs(factor))
colcat_missing <-  stats %>%
filter(type == "character", stat == "missing", value > 0) %$%
var
for (i in colcat_missing) {
log_sales_by_factor[[i]] <- fct_explicit_na(log_sales_by_factor[[i]], na_level = paste0(i, "_NA"))
}
lm1 <- lm(logSalesPrice ~ ., data = log_sales_by_factor)
dmrOutput <- DMR(lm1, clust.method = "ward.D2")
log_sales_by_factor <- train %>% data.frame %>%
select(SalePrice, colcat) %>%
mutate(logSalesPrice = log10(SalePrice + 1), SalePrice = NULL) %>%
mutate_at(vars(colcat), funs(factor))
lm1 <- lm(logSalesPrice ~ ., data = log_sales_by_factor)
dmrOutput <- DMR(lm1, clust.method = "ward.D2")
warnings()
dmrOutput
dmrOutput$Best$Partition$GarageFinish
class(dmrOutput$Best$Partition$GarageFinish)
a <- dmrOutput$Best$Partition$GarageFinish
names(a)
which(a == 1)
a <- dmrOutput$Best$Partition$MSZoning
a
plot_bf(dmrOutput)
dmrOutput$Best$Partition$MSZoning
unique(a)
fct_count(gss_cat$partyid)
dmrOutput$Best$Partition$MSZoning
a <- dmrOutput$Best$Partition
names(a)
a$MSZoning
a
sapply(a, function(a) print(a))
sapply(names(a), function(t) a[[t]])
log_sales_by_factor
colcat
?fct_collapse
t <- colcat[1]
train[[t]]
a <- fct_collapse(train[[t]], ("RL", "RM")
})
a <- fct_collapse(train[[t]], ("RL", "RM"))
train[[t]]
a <- fct_collapse(train[[t]], c("RL", "RM"))
a
fct_collapse(train[[t]], c("RL", "RM"))
a <- fct_collapse(train[[t]], a = c("RL", "RM"))
a
fct_collapse(train[[t]], "a" = c("RL", "RM"))
fct_collapse(train[[t]], "a-b" = c("RL", "RM"))
a <- dmrOutput$Best$Partition
a[[t]]
unique_levels <- unique(a[[t]])
unique_levels
unique_levels
a[[t]] == unique_levels
unique_levels
nombre <- sapply(unique_levels, function(t) which(a[[t]] == t))
nombre
a[[t]]
nombre <- sapply(unique_levels, function(i) which(a[[t]] == i))
nombre
a[[t]]
which(a[[t]] == 1)
nombre <- lapply(unique_levels, function(i) which(a[[t]] == i))
nombre
names(nombre)
names(nombre[[1]])
nombre <- lapply(unique_levels, function(i) names(which(a[[t]] == i)))
nombre
a <- fct_collapse(train[[t]], paste("a","b", sep = "-") = c("RL", "RM"))
paste("a","b", sep = "-")
bind_rows(nombre)
nombre <- lapply(unique_levels, function(i) vect = names(which(a[[t]] == i)))
nombre
nombre <- lapply(unique_levels, function(i) data.frame(names(which(a[[t]] == i))))
nombre
nombre <- lapply(unique_levels, function(i) data.frame(vect = names(which(a[[t]] == i))))
nombre
nombre <- lapply(unique_levels, function(i) data.frame("vect" = names(which(a[[t]] == i))))
nombre
n <- paste(names(which(a[[t]] == i)), sep = "-")
n
nombre <- lapply(unique_levels, function(i) {
n <- paste(names(which(a[[t]] == i)), sep = "-")
data.frame(n = names(which(a[[t]] == i)))
})
nombre
nombre <- lapply(unique_levels, function(i) {
n <- paste(names(which(a[[t]] == i)), sep = "-")
data.frame(a = names(which(a[[t]] == i))) %>%
rename_(n = a)
})
nombre <- lapply(unique_levels, function(i) {
n <- paste(names(which(a[[t]] == i)), sep = "-")
data.frame(names(which(a[[t]] == i)))
})
nombre
nombre <- lapply(unique_levels, function(i) {
dt <- data.frame(names(which(a[[t]] == i)))
names(dt) <- i
})
nombre
unique_levels <- unique(a[[t]])
nombre <- lapply(unique_levels, function(i) {
dt <- data.frame(names(which(a[[t]] == i)))
names(dt) <- paste("a", i)
})
nombre
nombre <- lapply(unique_levels, function(i) {
dt <- data.frame(names(which(a[[t]] == i)))
names(dt) <- paste("a", i)
return(dt)
})
nombre
nombre <- lapply(unique_levels, function(i) {
dt <- data.frame(names(which(a[[t]] == i)))
names(dt) <- paste("a", i, sep = "")
return(dt)
})
nombre
bind_cols(nombre)
train[[t]]
nombre
nombre
n <- paste(nombre[[1]], sep = "-")
n
n <- paste(nombre[[1]][1], sep = "-")
n
nombre[[1]]
n <- paste(nombre, sep = "-")
n
n <- nombre[1]
n
n <- nombre[[1]]
n
class(n)
nombre <- lapply(unique_levels, function(i) {
dt <- names(which(a[[t]] == i))
})
nombre
nombre[[1]]
n <- paste(nombre[[1]], sep = "-")
n
n <- paste(nombre[[1]], sep = "-")
n
nombre[[1]]
paste(nombre[[1]], sep = "-")
class(nombre[[1]])
n <- paste0(nombre[[1]], collapse = "-")
n
n <- gsub(" ", "", n)
n
a <- fct_collapse(train[[t]], get(n) = nombre[[1]])
a <- fct_collapse(train[[t]], nombre[[1]])
a <- fct_collapse(train[[t]], a = nombre[[1]])
a <- fct_collapse(train[[t]], get("n") = nombre[[1]])
a <- fct_collapse(train[[t]], "n = nombre[[1]]")
a <- fct_collapse(train[[t]], "~n = nombre[[1]]")
nombre[[1]]
a <- fct_collapse(train[[t]], nombre[[1]])
fct_collapse
a <- fct_collapse(train[[t]], list(nombre[[1]]))
a <- fct_collapse(train[[t]], list(a = nombre[[1]]))
a <- fct_collapse(train[[t]], a = nombre[[1]])
?fct_recode
# collapse of factor variables
log_sales_by_factor <- train %>% data.frame %>%
select(SalePrice, colcat) %>%
mutate(logSalesPrice = log10(SalePrice + 1), SalePrice = NULL) %>%
mutate_at(vars(colcat), funs(factor))
lm1 <- lm(logSalesPrice ~ ., data = log_sales_by_factor)
dmrOutput <- DMR(lm1, clust.method = "ward.D2")
a <- dmrOutput$Best$Partition
names(a)
a$MSZoning
lapply(colcat, function(t) {
#################
# Preprocessing #
#################
setwd("~/Dropbox/ProyectosDS/PHouse_Price")
Sys.setlocale(locale = "es_ES.UTF-8") # Para visualizar caracteres especiales
source("helper.R")
library(plotly)
library(mlr)
library(skimr)
library(DMR)
library(forcats)
installThesePackages()
loadThesePackages()
train <- fread("data/train.csv")
test <- fread("data/test.csv")
# EDA ---------------------------------------------------------------------
glimpse(train)
#################
# Preprocessing #
#################
setwd("~/Dropbox/ProyectosDS/PHouse_Price")
Sys.setlocale(locale = "es_ES.UTF-8") # Para visualizar caracteres especiales
source("helper.R")
library(plotly)
library(mlr)
library(skimr)
library(DMR)
library(forcats)
installThesePackages()
loadThesePackages()
train <- fread("data/train.csv")
test <- fread("data/test.csv")
# EDA ---------------------------------------------------------------------
glimpse(train)
View(test)
visualize_NA(train) # PoolQC, MiscFeature, Alley, Fence
train <- removeColumns_NA(data = train, upperBound = 40) # Removing high percent NA columns (> 80%)
stats <- skim(train)
colcat <- stats %>% filter(type == "character") %$% unique(var) # get character columns
stats
stats$type
stats$var
stats <- skim(train)
stats
stats %>% filter(missing > 0)
stats$stat
stats %>% filter(stat > "missing")
stats %>% filter(stat == "missing")
stats %>% spread(stat, value)
stats
stats %>% group_by(var) %>% count(stat)
stats %>% group_by(var) %>% count(stat, value)
colcat <- stats %>% filter(type == "character") %$% unique(var) # get character columns
stats$type
stats$stat
stats %>% spread(stat, value)
?spread
stats %>% spread(stat, value) %>% spread(var, type)
stats %>% filter(stat == "missing") %>% spread(stat, value)
stats %>%
filter(stat == "missing") %>%
spread(stat, value) %>%
filter(missing > 0)
colcat <- stats %>% filter(type == "character") %$% unique(var) # get character columns
train %>% mutate_at(vars(colcat), funs(as.factor)) # turn character variables to factor
train <- fread("data/train.csv") %>% as.tibble()
test <- fread("data/test.csv") %>% as.tibble()
glimpse(train)
visualize_NA(train) # PoolQC, MiscFeature, Alley, Fence
train <- removeColumns_NA(data = train, upperBound = 40) # Removing high percent NA columns (> 80%)
stats <- skim(train)
stats %>%
filter(stat == "missing") %>%
spread(stat, value) %>%
filter(missing > 0)
colcat <- stats %>% filter(type == "character") %$% unique(var) # get character columns
train %>% mutate_at(vars(colcat), funs(as.factor)) # turn character variables to factor
train <- train %>% mutate_at(vars(colcat), funs(as.factor)) # turn character variables to factor
stats <- skim(train)
stats
?fct_explicit_na()
fct_explicit_na(t, na_level = "justNA")
cat_NA <- function(t) {
fct_explicit_na(t, na_level = "justNA")
}
train <- train %>%
mutate_at(vars(colcat), funs(as.factor)) %>% # turn character variables to factor
mutate_at(vars(colcat), funs(cat_NA))
train %>% select(colcat) %>% # Counts of levels by each categorical column
gather(col, levels) %>%
count(col, levels) %>%
ggplot(aes(x = levels, y = n)) + geom_bar(stat = "identity", fill = "dodgerblue") +
facet_wrap(~col, scales = "free")
cat_NA <- function(t) {
fct_explicit_na(t, na_level = "NA")
}
colcat <- stats %>% filter(type == "character") %$% unique(var) # get character columns
train <- train %>%
mutate_at(vars(colcat), funs(as.factor)) %>% # turn character variables to factor
mutate_at(vars(colcat), funs(cat_NA)) # turning NA to a category "JustNA"
train %>% select(colcat) %>% # Counts of levels by each categorical column
gather(col, levels) %>%
count(col, levels) %>%
ggplot(aes(x = levels, y = n)) + geom_bar(stat = "identity", fill = "dodgerblue") +
facet_wrap(~col, scales = "free")
train <- fread("data/train.csv") %>% as.tibble()
test <- fread("data/test.csv") %>% as.tibble()
glimpse(train)
visualize_NA(train) # PoolQC, MiscFeature, Alley, Fence
train <- removeColumns_NA(data = train, upperBound = 40) # Removing high percent NA columns (> 80%)
stats <- skim(train)
stats %>%
filter(stat == "missing") %>%
spread(stat, value) %>%
filter(missing > 0)
cat_NA <- function(t) {
fct_explicit_na(t, na_level = "NA")
}
colcat <- stats %>% filter(type == "character") %$% unique(var) # get character columns
train <- train %>%
mutate_at(vars(colcat), funs(as.factor)) %>% # turn character variables to factor
mutate_at(vars(colcat), funs(cat_NA)) # turning NA to a category "JustNA"
train %>% select(colcat) %>% # Counts of levels by each categorical column
gather(col, levels) %>%
count(col, levels) %>%
ggplot(aes(x = levels, y = n)) + geom_bar(stat = "identity", fill = "dodgerblue") +
facet_wrap(~col, scales = "free")
train %>% # lets analyze the contribution of levels of categories in sales price
select(SalePrice, colcat) %>%
mutate(logSalesPrice = log10(SalePrice + 1)) %>% # log transformation of sales price
gather(col, levels, MSZoning:SaleCondition) %>%
ggplot(aes(x = levels, y = logSalesPrice, fill = col)) +
geom_boxplot() + theme(legend.position = "none") +
facet_wrap(~col, scales = "free")
colnum <- stats %>% filter(type == "numeric") %$% unique(var) # get character columns
stats$type %>% unique
colnum <- stats %>% filter(type == "integer") %$% unique(var) # get character columns
colnum
colnum <- stats %>% filter(type == "integer" & var != "Id") %$% unique(var) # get character columns
colnum
train %>% select(colnum) %>%
gather(col, values)
train %>% select(colnum) %>%
gather(col, values) %>%
ggplot(aes(x = col, y = values, group = col)) +
geom_boxplot()
stats %>% filter(type == "integer" & var != "Id")
stats
stats %>% filter(stat=="hist")
stats %>% filter(stat=="hist") %>% View
train %>% select(colnum) %>%
gather(col, values) %>%
ggplot(aes(x = 1, y = values)) +
geom_boxplot() +
facet_wrap(~col, scales = "free")
train %>% select(colnum) %>%
gather(col, values) %>%
ggplot(aes(x = 1, y = values, fill = col)) +
geom_boxplot() +
facet_wrap(~col, scales = "free")
caret::BoxCoxTrans(train$3`3SsnPorch`)
caret::BoxCoxTrans(train$`3SsnPorch`)
colnum
caret::BoxCoxTrans(train$MSSubClass)
caret::BoxCoxTrans(train$LotFrontage)
caret::BoxCoxTrans(train$YearRemodAdd)
glimpse(train)
names(train)[grepl("Yr", names(train))]
names(train)[grepl("Yr|Year", names(train))]
colcat <- c(colcat, names(train)[grepl("Yr|Year", names(train))])
train <- train %>%
mutate_at(vars(colcat), funs(as.factor)) %>% # turn character variables to factor
mutate_at(vars(colcat), funs(cat_NA)) # turning NA to a category "JustNA"
colnum <- stats %>% filter(type == "integer" & var != "Id") %$% unique(var) # get character columns
train %>% select(colnum) %>%
gather(col, values) %>%
ggplot(aes(x = 1, y = values, fill = col)) +
geom_boxplot() + theme(legend.position = "none") +
facet_wrap(~col, scales = "free")
data(BostonHousing, package = "mlbench")
BostonHousing
View(BostonHousing)
